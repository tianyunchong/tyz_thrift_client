<?php
namespace Route;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class resData
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'id',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'siteid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'param',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::BYTE,
        ),
        5 => array(
            'var' => 'mca',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'url',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'hash',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'hashid',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'addtime',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'uptime',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $id = null;
    /**
     * @var string
     */
    public $siteid = null;
    /**
     * @var string
     */
    public $param = null;
    /**
     * @var int
     */
    public $type = null;
    /**
     * @var string
     */
    public $mca = null;
    /**
     * @var string
     */
    public $url = null;
    /**
     * @var string
     */
    public $hash = null;
    /**
     * @var string
     */
    public $hashid = null;
    /**
     * @var int
     */
    public $addtime = null;
    /**
     * @var int
     */
    public $uptime = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['siteid'])) {
                $this->siteid = $vals['siteid'];
            }
            if (isset($vals['param'])) {
                $this->param = $vals['param'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['mca'])) {
                $this->mca = $vals['mca'];
            }
            if (isset($vals['url'])) {
                $this->url = $vals['url'];
            }
            if (isset($vals['hash'])) {
                $this->hash = $vals['hash'];
            }
            if (isset($vals['hashid'])) {
                $this->hashid = $vals['hashid'];
            }
            if (isset($vals['addtime'])) {
                $this->addtime = $vals['addtime'];
            }
            if (isset($vals['uptime'])) {
                $this->uptime = $vals['uptime'];
            }
        }
    }

    public function getName()
    {
        return 'resData';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->siteid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->param);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->mca);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->url);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->hash);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->hashid);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->addtime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->uptime);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('resData');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->siteid !== null) {
            $xfer += $output->writeFieldBegin('siteid', TType::STRING, 2);
            $xfer += $output->writeString($this->siteid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->param !== null) {
            $xfer += $output->writeFieldBegin('param', TType::STRING, 3);
            $xfer += $output->writeString($this->param);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', TType::BYTE, 4);
            $xfer += $output->writeByte($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->mca !== null) {
            $xfer += $output->writeFieldBegin('mca', TType::STRING, 5);
            $xfer += $output->writeString($this->mca);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->url !== null) {
            $xfer += $output->writeFieldBegin('url', TType::STRING, 6);
            $xfer += $output->writeString($this->url);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hash !== null) {
            $xfer += $output->writeFieldBegin('hash', TType::STRING, 7);
            $xfer += $output->writeString($this->hash);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hashid !== null) {
            $xfer += $output->writeFieldBegin('hashid', TType::STRING, 8);
            $xfer += $output->writeString($this->hashid);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->addtime !== null) {
            $xfer += $output->writeFieldBegin('addtime', TType::I32, 9);
            $xfer += $output->writeI32($this->addtime);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->uptime !== null) {
            $xfer += $output->writeFieldBegin('uptime', TType::I32, 10);
            $xfer += $output->writeI32($this->uptime);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
